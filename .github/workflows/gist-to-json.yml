name: Gist to JSON  # Name of the workflow

# Define when the workflow should run
on:
  schedule:  # Schedule the workflow to run on a cron schedule
    - cron: '0 0 * * *' # Run daily at 00:00 UTC (midnight)
  workflow_dispatch:  # Allow manually triggering the workflow

jobs: # Define the jobs that make up the workflow
  sanitize-and-update: # Name of this job
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner to execute the job
    permissions:  # Grant write access to the GITHUB_TOKEN
      contents: write

    # Define the steps of the job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 
        # ^ Use the checkout action to get the repository's code 
        #   so that the script can access and modify files.

      - name: Get gist last activity date
        id: gist-last-activity
        run: |
          GIST_REVISIONS_URL="https://gist.github.com/adamawolf/3048717/revisions"
          LAST_ACTIVITY_DATE=$(curl -s "$GIST_REVISIONS_URL" | grep -oE 'datetime="[0-9]{4}-[0-9]{2}-[0-9]{2}' | head -n 2 | tail -n 1 | cut -d '"' -f 2)
          echo "LAST_ACTIVITY_DATE=${LAST_ACTIVITY_DATE}" >> $GITHUB_ENV
          CACHE_DATE=$(echo $LAST_ACTIVITY_DATE | tr -d '-') 
          echo "CACHE_DATE=${CACHE_DATE}" >> $GITHUB_ENV

      - name: Restore cached last activity date
        uses: actions/cache@v3
        id: cache-timestamp
        with:
          path: sanitized_output.json # Cache the generated JSON file!
          key: ${{ runner.os }}-gist-${{ env.CACHE_DATE }} 

      - name: Setup Python
        if: steps.cache-timestamp.outputs.cache-hit != 'true' 
        # ^- Only run this step IF there's no cache hit (i.e., gist updated)
        uses: actions/setup-python@v4
        # ^- Use the setup-python action to set up a Python environment
        with:
          python-version: '3.x' # Use Python 3

      - name: Install requests
        if: steps.cache-timestamp.outputs.cache-hit != 'true' 
        # ^- Only run this step IF there's no cache hit
        run: pip install requests 
        # ^- Install the 'requests' library to make HTTP requests

      - name: Run sanitization script 
        if: steps.cache-timestamp.outputs.cache-hit != 'true' 
        # ^- Only run this step IF there's no cache hit
        run: python sanitize.py https://gist.githubusercontent.com/adamawolf/3048717/raw/bd838e3254565a8da730873667e5d39902fffe6e/Apple_mobile_device_types.txt sanitized_output.json
        # ^- Execute the Python script:
        #   - Pass the gist URL and output filename as arguments

      - name: Save last update date
        # Remove the 'if' condition:
        # if: steps.cache-timestamp.outputs.cache-hit != 'true' 
        run: echo "${{ env.LAST_MODIFIED }}" > last_updated.txt
        # ^- This will update the cache key on every run

      - name: Commit changes
        if: steps.cache-timestamp.outputs.cache-hit != 'true'
        uses: stefanzweifel/git-auto-commit-action@v4 
        with:
          commit_message: 'Update device list'
          file_pattern: sanitized_output.json
